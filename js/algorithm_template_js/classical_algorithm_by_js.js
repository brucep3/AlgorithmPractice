
/***************************************** 排序 *****************************************/



/***************************************** 链表 *****************************************/
// 反转链表：1 简单的反转链表
/**
 * lc-206 Reverse Linked List
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var reverseList = function(head) {

};

// 反转链表：2 区间反转

// 反转链表：3 两个一组反转链表

// 反转链表：4 K个1组翻转链表

// 环形链表：1 如何检测链表形成环

// 环形链表：2 如何找到环的起点

// 链表合并：1 合并两个有序链表

// 链表合并：2 合并K个有序链表

// 求链表中间节点

/***************************************** 栈和队列 *****************************************/


/***************************************** 二叉树 *****************************************/


/***************************************** AVL & 红黑树 *****************************************/


/***************************************** 字典树 & 并查集 *****************************************/


/***************************************** 索引堆 *****************************************/


/***************************************** 图 *****************************************/

